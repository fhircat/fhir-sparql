#!/usr/bin/env node

/*
canned-server -u <server root URL> -r <canned response path>
Run canned FHIR server listing to server root URL
*/

const Fs = require('fs');
const Path = require('path');
const Bunyan = require('bunyan');
const JsYaml = require('js-yaml');
const {MinimalFhirServer} = require('../util/MinimalFhirServer.js');

const DebugLevels = [
      'trace',
      'debug',
      'info',
      'warn',
      'error',
      'fatal',
]
const CommandLineOptions = [
  { name: "verbose",   alias: "v", type: Boolean, description: "print extra information" },
  { name: "debug",     alias: "d", type: String , description: "debug level: "+DebugLevels.join('|')},
  { name: "root",      alias: "u", type: String , description: "server root URL" },
  { name: "resp",      alias: "r", type: String , description: "canned response path" },
];

const ExitCode = {
  help: -1,
  bad_argument: -2,
  ok: 0,
};

main();

const served = [];

async function main () {

  let cmds;
  try {
    cmds = require("command-line-args")(CommandLineOptions);
  } catch (e) {
    abort(e.message, ExitCode.bad_argument);
  }

  // construct logger
  if (cmds.debug && DebugLevels.indexOf(cmds.debug) === -1)
    abort(`debug level ${cmds.debug} must be one of ${DebugLevels.join(', ')}`, ExitCode.bad_argument);
  const log = Bunyan.createLogger({
    name: 'canned-server',
    level: cmds.debug || 'warn',
    streams: [
      // log INFO and above to stdout
      { level: cmds.debug || 'warn', stream: process.stdout },
      // log ERROR and above to a file
      { level: 'error', path: './error.log' }
    ],
  });

  if (cmds.help)
    abort("", ExitCode.help);

  const {hostname, port, pathname} = new URL(cmds.root);
  const resourceIndex = JsYaml.load(Fs.readFileSync(Path.join(cmds.resp, 'index.yaml'), 'utf8'));

  // Create a server.
  const fhirServer = new MinimalFhirServer(hostname, port, pathname, cmds.resp, resourceIndex, log);

  process.on('SIGINT', function() {
    fhirServer.stop();
    console.log(`served ${served.length} requests`);
    process.exit(ExitCode.ok);
  });

  await fhirServer.start();
  console.log(`Server is running on http://${hostname}:${port}`);
}

function abort (msg, exitCode) {
  const output = exitCode === ExitCode.help ? console.log : console.error;
  output(msg);
  output(require('command-line-usage')([
    { header: 'canned-server',
      content: 'Run canned FHIR server listing to server root URL', },
    { header: 'Synopsis',
      content: "canned-server -u <server root URL> -r <canned response path>", },
    { header: 'Example',
      content: `./bin/canned-server \\
 -u http://localhost:8080/hapi/fhir/ \\
 -r fhir-sparql-test/src/test/resources/org/uu3/fhirServerResources/ \\
 -d info | ./node_modules/.bin/bunyan` },
    { header: 'Options',
      optionList: CommandLineOptions },
    { content: "Project home: " + require('chalk').underline("https://github.com/fhircat/fhir-sparql-js") },
  ]));
  process.exit(exitCode);
}
